// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	VirtualService
	RealServer
	ListResponse
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Protocol int32

const (
	Protocol_UNSET_PROTOCOL Protocol = 0
	Protocol_TCP            Protocol = 1
	Protocol_UDP            Protocol = 2
)

var Protocol_name = map[int32]string{
	0: "UNSET_PROTOCOL",
	1: "TCP",
	2: "UDP",
}
var Protocol_value = map[string]int32{
	"UNSET_PROTOCOL": 0,
	"TCP":            1,
	"UDP":            2,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}
func (Protocol) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ForwardMethod to forward packets to real servers.
type ForwardMethod int32

const (
	ForwardMethod_UNSET_FORWARD_METHOD ForwardMethod = 0
	ForwardMethod_ROUTE                ForwardMethod = 1
	ForwardMethod_TUNNEL               ForwardMethod = 2
	ForwardMethod_MASQ                 ForwardMethod = 3
)

var ForwardMethod_name = map[int32]string{
	0: "UNSET_FORWARD_METHOD",
	1: "ROUTE",
	2: "TUNNEL",
	3: "MASQ",
}
var ForwardMethod_value = map[string]int32{
	"UNSET_FORWARD_METHOD": 0,
	"ROUTE":                1,
	"TUNNEL":               2,
	"MASQ":                 3,
}

func (x ForwardMethod) String() string {
	return proto.EnumName(ForwardMethod_name, int32(x))
}
func (ForwardMethod) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type VirtualService struct {
	// ID is a unique identifier of this virtual service to associate it with real servers.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Key is the identifying part in IPVS.
	Key *VirtualService_Key `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// Config is the configurable part in IPVS.
	Config *VirtualService_Config `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
}

func (m *VirtualService) Reset()                    { *m = VirtualService{} }
func (m *VirtualService) String() string            { return proto.CompactTextString(m) }
func (*VirtualService) ProtoMessage()               {}
func (*VirtualService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VirtualService) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VirtualService) GetKey() *VirtualService_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *VirtualService) GetConfig() *VirtualService_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

type VirtualService_Key struct {
	Ip       string   `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port     uint32   `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Protocol Protocol `protobuf:"varint,3,opt,name=protocol,enum=types.Protocol" json:"protocol,omitempty"`
}

func (m *VirtualService_Key) Reset()                    { *m = VirtualService_Key{} }
func (m *VirtualService_Key) String() string            { return proto.CompactTextString(m) }
func (*VirtualService_Key) ProtoMessage()               {}
func (*VirtualService_Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *VirtualService_Key) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *VirtualService_Key) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *VirtualService_Key) GetProtocol() Protocol {
	if m != nil {
		return m.Protocol
	}
	return Protocol_UNSET_PROTOCOL
}

type VirtualService_Config struct {
	Scheduler string   `protobuf:"bytes,1,opt,name=scheduler" json:"scheduler,omitempty"`
	Flags     []string `protobuf:"bytes,2,rep,name=flags" json:"flags,omitempty"`
}

func (m *VirtualService_Config) Reset()                    { *m = VirtualService_Config{} }
func (m *VirtualService_Config) String() string            { return proto.CompactTextString(m) }
func (*VirtualService_Config) ProtoMessage()               {}
func (*VirtualService_Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *VirtualService_Config) GetScheduler() string {
	if m != nil {
		return m.Scheduler
	}
	return ""
}

func (m *VirtualService_Config) GetFlags() []string {
	if m != nil {
		return m.Flags
	}
	return nil
}

type RealServer struct {
	// ServiceID is the id of the virtual service to associate this real server with.
	ServiceID string `protobuf:"bytes,1,opt,name=serviceID" json:"serviceID,omitempty"`
	// Key is the identifying part in IPVS.
	Key *RealServer_Key `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// Config is the configurable part in IPVS.
	Config *RealServer_Config `protobuf:"bytes,3,opt,name=config" json:"config,omitempty"`
	// Healthcheck is the check done by merlin against this real server.
	Healthcheck *RealServer_Healthcheck `protobuf:"bytes,4,opt,name=healthcheck" json:"healthcheck,omitempty"`
}

func (m *RealServer) Reset()                    { *m = RealServer{} }
func (m *RealServer) String() string            { return proto.CompactTextString(m) }
func (*RealServer) ProtoMessage()               {}
func (*RealServer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RealServer) GetServiceID() string {
	if m != nil {
		return m.ServiceID
	}
	return ""
}

func (m *RealServer) GetKey() *RealServer_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RealServer) GetConfig() *RealServer_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *RealServer) GetHealthcheck() *RealServer_Healthcheck {
	if m != nil {
		return m.Healthcheck
	}
	return nil
}

type RealServer_Key struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *RealServer_Key) Reset()                    { *m = RealServer_Key{} }
func (m *RealServer_Key) String() string            { return proto.CompactTextString(m) }
func (*RealServer_Key) ProtoMessage()               {}
func (*RealServer_Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *RealServer_Key) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RealServer_Key) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type RealServer_Config struct {
	Weight  *google_protobuf1.UInt32Value `protobuf:"bytes,1,opt,name=weight" json:"weight,omitempty"`
	Forward ForwardMethod                 `protobuf:"varint,2,opt,name=forward,enum=types.ForwardMethod" json:"forward,omitempty"`
}

func (m *RealServer_Config) Reset()                    { *m = RealServer_Config{} }
func (m *RealServer_Config) String() string            { return proto.CompactTextString(m) }
func (*RealServer_Config) ProtoMessage()               {}
func (*RealServer_Config) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *RealServer_Config) GetWeight() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (m *RealServer_Config) GetForward() ForwardMethod {
	if m != nil {
		return m.Forward
	}
	return ForwardMethod_UNSET_FORWARD_METHOD
}

type RealServer_Healthcheck struct {
	Target             string `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Timeout            uint32 `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
	Interval           uint32 `protobuf:"varint,3,opt,name=interval" json:"interval,omitempty"`
	HealthyThreshold   uint32 `protobuf:"varint,4,opt,name=healthy_threshold,json=healthyThreshold" json:"healthy_threshold,omitempty"`
	UnhealthyThreshold uint32 `protobuf:"varint,5,opt,name=unhealthy_threshold,json=unhealthyThreshold" json:"unhealthy_threshold,omitempty"`
}

func (m *RealServer_Healthcheck) Reset()                    { *m = RealServer_Healthcheck{} }
func (m *RealServer_Healthcheck) String() string            { return proto.CompactTextString(m) }
func (*RealServer_Healthcheck) ProtoMessage()               {}
func (*RealServer_Healthcheck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

func (m *RealServer_Healthcheck) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *RealServer_Healthcheck) GetTimeout() uint32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *RealServer_Healthcheck) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *RealServer_Healthcheck) GetHealthyThreshold() uint32 {
	if m != nil {
		return m.HealthyThreshold
	}
	return 0
}

func (m *RealServer_Healthcheck) GetUnhealthyThreshold() uint32 {
	if m != nil {
		return m.UnhealthyThreshold
	}
	return 0
}

type ListResponse struct {
	Items []*ListResponse_Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListResponse) GetItems() []*ListResponse_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type ListResponse_Item struct {
	Service *VirtualService `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Servers []*RealServer   `protobuf:"bytes,2,rep,name=servers" json:"servers,omitempty"`
}

func (m *ListResponse_Item) Reset()                    { *m = ListResponse_Item{} }
func (m *ListResponse_Item) String() string            { return proto.CompactTextString(m) }
func (*ListResponse_Item) ProtoMessage()               {}
func (*ListResponse_Item) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *ListResponse_Item) GetService() *VirtualService {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *ListResponse_Item) GetServers() []*RealServer {
	if m != nil {
		return m.Servers
	}
	return nil
}

func init() {
	proto.RegisterType((*VirtualService)(nil), "types.VirtualService")
	proto.RegisterType((*VirtualService_Key)(nil), "types.VirtualService.Key")
	proto.RegisterType((*VirtualService_Config)(nil), "types.VirtualService.Config")
	proto.RegisterType((*RealServer)(nil), "types.RealServer")
	proto.RegisterType((*RealServer_Key)(nil), "types.RealServer.Key")
	proto.RegisterType((*RealServer_Config)(nil), "types.RealServer.Config")
	proto.RegisterType((*RealServer_Healthcheck)(nil), "types.RealServer.Healthcheck")
	proto.RegisterType((*ListResponse)(nil), "types.ListResponse")
	proto.RegisterType((*ListResponse_Item)(nil), "types.ListResponse.Item")
	proto.RegisterEnum("types.Protocol", Protocol_name, Protocol_value)
	proto.RegisterEnum("types.ForwardMethod", ForwardMethod_name, ForwardMethod_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Merlin service

type MerlinClient interface {
	CreateService(ctx context.Context, in *VirtualService, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdateService(ctx context.Context, in *VirtualService, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeleteService(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	CreateServer(ctx context.Context, in *RealServer, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	UpdateServer(ctx context.Context, in *RealServer, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	DeleteServer(ctx context.Context, in *RealServer, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	List(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ListResponse, error)
}

type merlinClient struct {
	cc *grpc.ClientConn
}

func NewMerlinClient(cc *grpc.ClientConn) MerlinClient {
	return &merlinClient{cc}
}

func (c *merlinClient) CreateService(ctx context.Context, in *VirtualService, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/types.Merlin/CreateService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merlinClient) UpdateService(ctx context.Context, in *VirtualService, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/types.Merlin/UpdateService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merlinClient) DeleteService(ctx context.Context, in *google_protobuf1.StringValue, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/types.Merlin/DeleteService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merlinClient) CreateServer(ctx context.Context, in *RealServer, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/types.Merlin/CreateServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merlinClient) UpdateServer(ctx context.Context, in *RealServer, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/types.Merlin/UpdateServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merlinClient) DeleteServer(ctx context.Context, in *RealServer, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/types.Merlin/DeleteServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merlinClient) List(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/types.Merlin/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Merlin service

type MerlinServer interface {
	CreateService(context.Context, *VirtualService) (*google_protobuf.Empty, error)
	UpdateService(context.Context, *VirtualService) (*google_protobuf.Empty, error)
	DeleteService(context.Context, *google_protobuf1.StringValue) (*google_protobuf.Empty, error)
	CreateServer(context.Context, *RealServer) (*google_protobuf.Empty, error)
	UpdateServer(context.Context, *RealServer) (*google_protobuf.Empty, error)
	DeleteServer(context.Context, *RealServer) (*google_protobuf.Empty, error)
	List(context.Context, *google_protobuf.Empty) (*ListResponse, error)
}

func RegisterMerlinServer(s *grpc.Server, srv MerlinServer) {
	s.RegisterService(&_Merlin_serviceDesc, srv)
}

func _Merlin_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerlinServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Merlin/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerlinServer).CreateService(ctx, req.(*VirtualService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merlin_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerlinServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Merlin/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerlinServer).UpdateService(ctx, req.(*VirtualService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merlin_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerlinServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Merlin/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerlinServer).DeleteService(ctx, req.(*google_protobuf1.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merlin_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerlinServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Merlin/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerlinServer).CreateServer(ctx, req.(*RealServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merlin_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerlinServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Merlin/UpdateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerlinServer).UpdateServer(ctx, req.(*RealServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merlin_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealServer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerlinServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Merlin/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerlinServer).DeleteServer(ctx, req.(*RealServer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Merlin_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerlinServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.Merlin/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerlinServer).List(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Merlin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.Merlin",
	HandlerType: (*MerlinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _Merlin_CreateService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _Merlin_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Merlin_DeleteService_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _Merlin_CreateServer_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _Merlin_UpdateServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _Merlin_DeleteServer_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Merlin_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types.proto",
}

func init() { proto.RegisterFile("types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x94, 0x4d, 0x6f, 0xf2, 0x46,
	0x10, 0xc7, 0x31, 0xe6, 0x75, 0x08, 0xd4, 0xd9, 0xbc, 0xc8, 0x75, 0xd3, 0x0a, 0x71, 0x69, 0x1a,
	0x24, 0x13, 0x91, 0xf4, 0xd4, 0x4a, 0x6d, 0x04, 0xa4, 0x49, 0x13, 0x02, 0x5d, 0x20, 0x3d, 0x46,
	0x0e, 0x1e, 0xb0, 0x15, 0x63, 0x5b, 0xeb, 0x25, 0x11, 0x1f, 0xa5, 0x87, 0xde, 0xfa, 0x25, 0x7a,
	0xee, 0x17, 0xab, 0x58, 0xdb, 0x98, 0x04, 0x9e, 0xe8, 0x79, 0xb9, 0x79, 0xc6, 0xbf, 0xff, 0xcc,
	0xec, 0xec, 0xdf, 0x86, 0x12, 0x5f, 0xf8, 0x18, 0xe8, 0x3e, 0xf3, 0xb8, 0x47, 0xb2, 0x22, 0xd0,
	0xbe, 0x99, 0x7a, 0xde, 0xd4, 0xc1, 0x86, 0x48, 0x3e, 0xce, 0x27, 0x0d, 0x9c, 0xf9, 0x7c, 0x11,
	0x32, 0xda, 0x77, 0x6f, 0x5f, 0xbe, 0x30, 0xc3, 0xf7, 0x91, 0x45, 0x35, 0x6a, 0x7f, 0xa5, 0xa1,
	0x72, 0x6f, 0x33, 0x3e, 0x37, 0x9c, 0x01, 0xb2, 0x67, 0x7b, 0x8c, 0xa4, 0x02, 0x69, 0xdb, 0x54,
	0xa5, 0xaa, 0x74, 0x5c, 0xa4, 0x69, 0xdb, 0x24, 0x75, 0x90, 0x9f, 0x70, 0xa1, 0xa6, 0xab, 0xd2,
	0x71, 0xa9, 0xf9, 0xb5, 0x1e, 0x4e, 0xf0, 0x5a, 0xa3, 0xdf, 0xe0, 0x82, 0x2e, 0x29, 0x72, 0x0e,
	0xb9, 0xb1, 0xe7, 0x4e, 0xec, 0xa9, 0x2a, 0x0b, 0xfe, 0x68, 0x3b, 0xdf, 0x12, 0x0c, 0x8d, 0x58,
	0xed, 0x1e, 0xe4, 0x1b, 0x5c, 0x88, 0xce, 0xfe, 0xaa, 0xb3, 0x4f, 0x08, 0x64, 0x7c, 0x8f, 0x71,
	0xd1, 0xba, 0x4c, 0xc5, 0x33, 0xa9, 0x43, 0x41, 0x4c, 0x3e, 0xf6, 0x1c, 0xd1, 0xa2, 0xd2, 0xfc,
	0x2a, 0x6a, 0xd1, 0x8f, 0xd2, 0x74, 0x05, 0x68, 0x3f, 0x43, 0x2e, 0xec, 0x44, 0x8e, 0xa0, 0x18,
	0x8c, 0x2d, 0x34, 0xe7, 0x0e, 0xb2, 0xa8, 0x43, 0x92, 0x20, 0xfb, 0x90, 0x9d, 0x38, 0xc6, 0x34,
	0x50, 0xd3, 0x55, 0xf9, 0xb8, 0x48, 0xc3, 0xa0, 0xf6, 0x77, 0x06, 0x80, 0x62, 0x38, 0x34, 0x32,
	0x51, 0x22, 0x1c, 0xff, 0xba, 0xbd, 0x2a, 0x11, 0x27, 0xc8, 0xf7, 0xeb, 0x5b, 0x3a, 0x88, 0x46,
	0x4a, 0xd4, 0xc9, 0x86, 0x4e, 0xdf, 0x6c, 0x48, 0xdd, 0x64, 0x5f, 0x6f, 0x87, 0xfc, 0x02, 0x25,
	0x0b, 0x0d, 0x87, 0x5b, 0x63, 0x0b, 0xc7, 0x4f, 0x6a, 0x46, 0xc8, 0xbe, 0xdd, 0x94, 0x5d, 0x25,
	0x10, 0x5d, 0x57, 0x68, 0x3f, 0x7c, 0xf4, 0x7a, 0x35, 0x77, 0xb5, 0xb1, 0x73, 0xc8, 0xbd, 0xa0,
	0x3d, 0xb5, 0xb8, 0x50, 0x2c, 0x6f, 0x32, 0xb4, 0x92, 0x1e, 0x5b, 0x49, 0x1f, 0x5d, 0xbb, 0xfc,
	0xac, 0x79, 0x6f, 0x38, 0x73, 0xa4, 0x11, 0x4b, 0x74, 0xc8, 0x4f, 0x3c, 0xf6, 0x62, 0x30, 0x53,
	0x94, 0xad, 0x34, 0xf7, 0xa3, 0x39, 0x2f, 0xc3, 0x6c, 0x17, 0xb9, 0xe5, 0x99, 0x34, 0x86, 0xb4,
	0x7f, 0x25, 0x28, 0xad, 0xcd, 0x4d, 0x0e, 0x21, 0xc7, 0x0d, 0x36, 0x45, 0x1e, 0xcd, 0x19, 0x45,
	0x44, 0x85, 0x3c, 0xb7, 0x67, 0xe8, 0xcd, 0xe3, 0x71, 0xe3, 0x90, 0x68, 0x50, 0xb0, 0x5d, 0x8e,
	0xec, 0xd9, 0x08, 0x0d, 0x51, 0xa6, 0xab, 0x98, 0xd4, 0x61, 0x37, 0xdc, 0xc3, 0xe2, 0x81, 0x5b,
	0x0c, 0x03, 0xcb, 0x73, 0x4c, 0xb1, 0xbf, 0x32, 0x55, 0xa2, 0x17, 0xc3, 0x38, 0x4f, 0x1a, 0xb0,
	0x37, 0x77, 0x37, 0xf1, 0xac, 0xc0, 0xc9, 0xea, 0xd5, 0x4a, 0x50, 0xfb, 0x47, 0x82, 0x9d, 0x5b,
	0x3b, 0xe0, 0x14, 0x03, 0xdf, 0x73, 0x03, 0x24, 0x3a, 0x64, 0x6d, 0x8e, 0xb3, 0x40, 0x95, 0xaa,
	0xf2, 0xda, 0xcd, 0xae, 0x33, 0xfa, 0x35, 0xc7, 0x19, 0x0d, 0x31, 0xcd, 0x84, 0xcc, 0x32, 0x24,
	0x0d, 0xc8, 0x47, 0x46, 0x8a, 0x76, 0x7d, 0xb0, 0xf5, 0xab, 0xa1, 0x31, 0x45, 0xea, 0xa1, 0x00,
	0x59, 0xe8, 0xd8, 0x52, 0x73, 0x77, 0xc3, 0x0d, 0x34, 0x26, 0x4e, 0x4e, 0xa1, 0x10, 0x7f, 0x1a,
	0x84, 0x40, 0x65, 0x74, 0x37, 0xe8, 0x0c, 0x1f, 0xfa, 0xb4, 0x37, 0xec, 0xb5, 0x7a, 0xb7, 0x4a,
	0x8a, 0xe4, 0x41, 0x1e, 0xb6, 0xfa, 0x8a, 0xb4, 0x7c, 0x18, 0xb5, 0xfb, 0x4a, 0xfa, 0xe4, 0x77,
	0x28, 0xbf, 0xba, 0x2e, 0xa2, 0xc2, 0x7e, 0x28, 0xbb, 0xec, 0xd1, 0x3f, 0x2f, 0x68, 0xfb, 0xa1,
	0xdb, 0x19, 0x5e, 0xf5, 0xda, 0x4a, 0x8a, 0x14, 0x21, 0x4b, 0x7b, 0xa3, 0x61, 0x47, 0x91, 0x08,
	0x40, 0x6e, 0x38, 0xba, 0xbb, 0xeb, 0xdc, 0x2a, 0x69, 0x52, 0x80, 0x4c, 0xf7, 0x62, 0xf0, 0x87,
	0x22, 0x37, 0xff, 0x93, 0x21, 0xd7, 0x45, 0xe6, 0xd8, 0x2e, 0xf9, 0x15, 0xca, 0x2d, 0x86, 0x06,
	0xc7, 0xf8, 0x4f, 0xb3, 0xfd, 0x98, 0xda, 0xe1, 0x86, 0xd3, 0x3a, 0xcb, 0x3f, 0x5a, 0x2d, 0xb5,
	0xac, 0x30, 0xf2, 0xcd, 0x2f, 0xa9, 0xf0, 0x1b, 0x94, 0xdb, 0xe8, 0x60, 0x52, 0x61, 0xd3, 0xd6,
	0x03, 0xce, 0x6c, 0x77, 0x2a, 0x6c, 0xfd, 0x4e, 0xa1, 0x9f, 0x60, 0x27, 0x39, 0x0c, 0x32, 0xb2,
	0x79, 0x03, 0xef, 0x8b, 0x93, 0x73, 0x7c, 0x86, 0x38, 0x39, 0xc2, 0xa7, 0x8a, 0x7f, 0x84, 0xcc,
	0xd2, 0x8e, 0xe4, 0x03, 0x84, 0xb6, 0xb7, 0xc5, 0xb3, 0xb5, 0xd4, 0x63, 0x4e, 0x60, 0x67, 0xff,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xca, 0x38, 0x63, 0x80, 0x06, 0x00, 0x00,
}
